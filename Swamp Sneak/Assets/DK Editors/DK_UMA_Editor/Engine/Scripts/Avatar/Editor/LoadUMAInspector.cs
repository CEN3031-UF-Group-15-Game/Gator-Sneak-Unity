using UnityEngine;
using System.Collections;
using UnityEditor;

[CustomEditor(typeof(LoadUMA))]
public class LoadUMAInspector : Editor {
	LoadUMA _LoadUMA;
	bool ViewInspector = false;

	void OnEnable (){
		_LoadUMA = (LoadUMA)target;
		#if UNITY_EDITOR
	/*	if ( EditorApplication.isPlaying == false ){
			if ( _LoadUMA.transform.GetComponent<PreviewAvatar>() == false ) 
				_LoadUMA.gameObject.AddComponent<PreviewAvatar>();
			if ( _LoadUMA.transform.GetComponent<PreviewAvatar>().NewPreview == null )
				_LoadUMA.transform.GetComponent<PreviewAvatar>().GeneratePreview ();
		}*/
		#endif
	}

	public override void OnInspectorGUI()
	{
		ViewInspector = EditorGUILayout.Toggle ( "View Inspector",ViewInspector);

		EditorGUILayout.HelpBox("This component is used for the generation of the avatar. It is destroyed after its usage at runtime and recreated by the TransposeDK2UMA component when rebuilding an avatar.", UnityEditor.MessageType.None);
		EditorGUILayout.HelpBox("It gets the DK DNA list of the avatar to send it to the UMA avatar after the avatar to be generated by the UMA Engine at runtime.", UnityEditor.MessageType.None);

		EditorGUILayout.HelpBox("Optionnal : In some particular cases it could be necessary to hide the avatar at start after it to be generated.", UnityEditor.MessageType.None);
		_LoadUMA.HideAtStart = EditorGUILayout.Toggle ( "Hide at Start ?",_LoadUMA.HideAtStart);

		EditorGUILayout.HelpBox("Optionnal : In some particular cases it could be necessary to assign a specific Layer to the model of the avatar. It is generaly used for a player controller avatar. If checked, the Layer of this GameObject will be assigned to the SKinnedMeshRenderer object.", UnityEditor.MessageType.None);
		_LoadUMA.AssignLayer = EditorGUILayout.Toggle ( "Assign Layer ?",_LoadUMA.AssignLayer);

		// test to delete
		if ( GUILayout.Button ( "Apply DNA", GUILayout.ExpandWidth (true))) {



			UMA.UMAData umaData;
			umaData = _LoadUMA.gameObject.GetComponent<UMA.UMAData>();
			if ( umaData == null ) _LoadUMA.gameObject.GetComponentInChildren<UMA.UMAData>();
			if ( umaData == null
				&& _LoadUMA.gameObject.GetComponent<PreviewAvatar>() != null ) 
				umaData = _LoadUMA.gameObject.GetComponent<PreviewAvatar>().NewPreview.GetComponent<UMA.UMAData>();

			if ( umaData != null ) _LoadUMA.ApplyDNAOnebyOne (umaData);
			else Debug.LogError ("No umaData found");
		}

		if ( ViewInspector ) DrawDefaultInspector();
	}
}
